{
  "version": 3,
  "sources": ["../../@tauri-apps/api/window.js"],
  "sourcesContent": ["import { invokeTauriCommand } from './helpers/tauri.js';\r\nimport { listen, once, emit } from './helpers/event.js';\r\nimport { TauriEvent } from './event.js';\r\n\r\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\r\n// SPDX-License-Identifier: Apache-2.0\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * Provides APIs to create windows, communicate with other windows and manipulate the current window.\r\n *\r\n * This package is also accessible with `window.__TAURI__.window` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\r\n *\r\n * The APIs must be added to [`tauri.allowlist.window`](https://tauri.app/v1/api/config/#allowlistconfig.window) in `tauri.conf.json`:\r\n * ```json\r\n * {\r\n *   \"tauri\": {\r\n *     \"allowlist\": {\r\n *       \"window\": {\r\n *         \"all\": true, // enable all window APIs\r\n *         \"create\": true, // enable window creation\r\n *         \"center\": true,\r\n *         \"requestUserAttention\": true,\r\n *         \"setResizable\": true,\r\n *         \"setMaximizable\": true,\r\n *         \"setMinimizable\": true,\r\n *         \"setClosable\": true,\r\n *         \"setTitle\": true,\r\n *         \"maximize\": true,\r\n *         \"unmaximize\": true,\r\n *         \"minimize\": true,\r\n *         \"unminimize\": true,\r\n *         \"show\": true,\r\n *         \"hide\": true,\r\n *         \"close\": true,\r\n *         \"setDecorations\": true,\r\n *         \"setAlwaysOnTop\": true,\r\n *         \"setContentProtected\": true,\r\n *         \"setSize\": true,\r\n *         \"setMinSize\": true,\r\n *         \"setMaxSize\": true,\r\n *         \"setPosition\": true,\r\n *         \"setFullscreen\": true,\r\n *         \"setFocus\": true,\r\n *         \"setIcon\": true,\r\n *         \"setSkipTaskbar\": true,\r\n *         \"setCursorGrab\": true,\r\n *         \"setCursorVisible\": true,\r\n *         \"setCursorIcon\": true,\r\n *         \"setCursorPosition\": true,\r\n *         \"setIgnoreCursorEvents\": true,\r\n *         \"startDragging\": true,\r\n *         \"print\": true\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\r\n *\r\n * ## Window events\r\n *\r\n * Events can be listened to using `appWindow.listen`:\r\n * ```typescript\r\n * import { appWindow } from \"@tauri-apps/api/window\";\r\n * appWindow.listen(\"my-window-event\", ({ event, payload }) => { });\r\n * ```\r\n *\r\n * @module\r\n */\r\n/**\r\n * A size represented in logical pixels.\r\n *\r\n * @since 1.0.0\r\n */\r\nclass LogicalSize {\r\n    constructor(width, height) {\r\n        this.type = 'Logical';\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n/**\r\n * A size represented in physical pixels.\r\n *\r\n * @since 1.0.0\r\n */\r\nclass PhysicalSize {\r\n    constructor(width, height) {\r\n        this.type = 'Physical';\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    /**\r\n     * Converts the physical size to a logical one.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const factor = await appWindow.scaleFactor();\r\n     * const size = await appWindow.innerSize();\r\n     * const logical = size.toLogical(factor);\r\n     * ```\r\n     *  */\r\n    toLogical(scaleFactor) {\r\n        return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor);\r\n    }\r\n}\r\n/**\r\n *  A position represented in logical pixels.\r\n *\r\n * @since 1.0.0\r\n */\r\nclass LogicalPosition {\r\n    constructor(x, y) {\r\n        this.type = 'Logical';\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n/**\r\n *  A position represented in physical pixels.\r\n *\r\n * @since 1.0.0\r\n */\r\nclass PhysicalPosition {\r\n    constructor(x, y) {\r\n        this.type = 'Physical';\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    /**\r\n     * Converts the physical position to a logical one.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const factor = await appWindow.scaleFactor();\r\n     * const position = await appWindow.innerPosition();\r\n     * const logical = position.toLogical(factor);\r\n     * ```\r\n     * */\r\n    toLogical(scaleFactor) {\r\n        return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor);\r\n    }\r\n}\r\n/**\r\n * Attention type to request on a window.\r\n *\r\n * @since 1.0.0\r\n */\r\nvar UserAttentionType;\r\n(function (UserAttentionType) {\r\n    /**\r\n     * #### Platform-specific\r\n     * - **macOS:** Bounces the dock icon until the application is in focus.\r\n     * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.\r\n     */\r\n    UserAttentionType[UserAttentionType[\"Critical\"] = 1] = \"Critical\";\r\n    /**\r\n     * #### Platform-specific\r\n     * - **macOS:** Bounces the dock icon once.\r\n     * - **Windows:** Flashes the taskbar button until the application is in focus.\r\n     */\r\n    UserAttentionType[UserAttentionType[\"Informational\"] = 2] = \"Informational\";\r\n})(UserAttentionType || (UserAttentionType = {}));\r\n/**\r\n * Get an instance of `WebviewWindow` for the current webview window.\r\n *\r\n * @since 1.0.0\r\n */\r\nfunction getCurrent() {\r\n    return new WebviewWindow(window.__TAURI_METADATA__.__currentWindow.label, {\r\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\r\n        skip: true\r\n    });\r\n}\r\n/**\r\n * Gets a list of instances of `WebviewWindow` for all available webview windows.\r\n *\r\n * @since 1.0.0\r\n */\r\nfunction getAll() {\r\n    return window.__TAURI_METADATA__.__windows.map((w) => new WebviewWindow(w.label, {\r\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\r\n        skip: true\r\n    }));\r\n}\r\n/** @ignore */\r\n// events that are emitted right here instead of by the created webview\r\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\r\n/**\r\n * A webview window handle allows emitting and listening to events from the backend that are tied to the window.\r\n *\r\n * @ignore\r\n * @since 1.0.0\r\n */\r\nclass WebviewWindowHandle {\r\n    constructor(label) {\r\n        this.label = label;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.listeners = Object.create(null);\r\n    }\r\n    /**\r\n     * Listen to an event emitted by the backend or webview.\r\n     * The event must either be a global event or an event targetting this window.\r\n     *\r\n     * See {@link WebviewWindow.emit | `emit`} for more information.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const unlisten = await appWindow.listen<string>('state-changed', (event) => {\r\n     *   console.log(`Got error: ${payload}`);\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     *\r\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n     * @param handler Event handler.\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     */\r\n    async listen(event, handler) {\r\n        if (this._handleTauriEvent(event, handler)) {\r\n            return Promise.resolve(() => {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, security/detect-object-injection\r\n                const listeners = this.listeners[event];\r\n                listeners.splice(listeners.indexOf(handler), 1);\r\n            });\r\n        }\r\n        return listen(event, this.label, handler);\r\n    }\r\n    /**\r\n     * Listen to an one-off event.\r\n     * See {@link WebviewWindow.listen | `listen`} for more information.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const unlisten = await appWindow.once<null>('initialized', (event) => {\r\n     *   console.log(`Window initialized!`);\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     *\r\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n     * @param handler Event handler.\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     */\r\n    async once(event, handler) {\r\n        if (this._handleTauriEvent(event, handler)) {\r\n            return Promise.resolve(() => {\r\n                // eslint-disable-next-line security/detect-object-injection\r\n                const listeners = this.listeners[event];\r\n                listeners.splice(listeners.indexOf(handler), 1);\r\n            });\r\n        }\r\n        return once(event, this.label, handler);\r\n    }\r\n    /**\r\n     * Emits an event to the backend and all Tauri windows.\r\n     * The event will have this window's {@link WebviewWindow.label | label} as {@link Event.windowLabel | source window label}.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.emit('window-loaded', { loggedIn: true, token: 'authToken' });\r\n     * ```\r\n     *\r\n     * This function can also be used to communicate between windows:\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.listen('sync-data', (event) => { });\r\n     *\r\n     * // on another window...\r\n     * import { WebviewWindow } from '@tauri-apps/api/window';\r\n     * const otherWindow = WebviewWindow.getByLabel('other')\r\n     * await otherWindow.emit('sync-data');\r\n     * ```\r\n     *\r\n     * Global listeners are also triggered:\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * import { listen } from '@tauri-apps/api/event';\r\n     * await listen('ping', (event) => { });\r\n     *\r\n     * await appWindow.emit('ping');\r\n     * ```\r\n     *\r\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n     * @param payload Event payload.\r\n     */\r\n    async emit(event, payload) {\r\n        if (localTauriEvents.includes(event)) {\r\n            // eslint-disable-next-line\r\n            for (const handler of this.listeners[event] || []) {\r\n                handler({ event, id: -1, windowLabel: this.label, payload });\r\n            }\r\n            return Promise.resolve();\r\n        }\r\n        return emit(event, this.label, payload);\r\n    }\r\n    /** @ignore */\r\n    _handleTauriEvent(event, handler) {\r\n        if (localTauriEvents.includes(event)) {\r\n            if (!(event in this.listeners)) {\r\n                // eslint-disable-next-line\r\n                this.listeners[event] = [handler];\r\n            }\r\n            else {\r\n                // eslint-disable-next-line\r\n                this.listeners[event].push(handler);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Manage the current window object.\r\n *\r\n * @ignore\r\n * @since 1.0.0\r\n */\r\nclass WindowManager extends WebviewWindowHandle {\r\n    // Getters\r\n    /**\r\n     * The scale factor that can be used to map physical pixels to logical pixels.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const factor = await appWindow.scaleFactor();\r\n     * ```\r\n     *\r\n     * @returns The window's monitor scale factor.\r\n     * */\r\n    async scaleFactor() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'scaleFactor'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const position = await appWindow.innerPosition();\r\n     * ```\r\n     *\r\n     * @returns The window's inner position.\r\n     *  */\r\n    async innerPosition() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'innerPosition'\r\n                    }\r\n                }\r\n            }\r\n        }).then(({ x, y }) => new PhysicalPosition(x, y));\r\n    }\r\n    /**\r\n     * The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const position = await appWindow.outerPosition();\r\n     * ```\r\n     *\r\n     * @returns The window's outer position.\r\n     *  */\r\n    async outerPosition() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'outerPosition'\r\n                    }\r\n                }\r\n            }\r\n        }).then(({ x, y }) => new PhysicalPosition(x, y));\r\n    }\r\n    /**\r\n     * The physical size of the window's client area.\r\n     * The client area is the content of the window, excluding the title bar and borders.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const size = await appWindow.innerSize();\r\n     * ```\r\n     *\r\n     * @returns The window's inner size.\r\n     */\r\n    async innerSize() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'innerSize'\r\n                    }\r\n                }\r\n            }\r\n        }).then(({ width, height }) => new PhysicalSize(width, height));\r\n    }\r\n    /**\r\n     * The physical size of the entire window.\r\n     * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const size = await appWindow.outerSize();\r\n     * ```\r\n     *\r\n     * @returns The window's outer size.\r\n     */\r\n    async outerSize() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'outerSize'\r\n                    }\r\n                }\r\n            }\r\n        }).then(({ width, height }) => new PhysicalSize(width, height));\r\n    }\r\n    /**\r\n     * Gets the window's current fullscreen state.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const fullscreen = await appWindow.isFullscreen();\r\n     * ```\r\n     *\r\n     * @returns Whether the window is in fullscreen mode or not.\r\n     *  */\r\n    async isFullscreen() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'isFullscreen'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current minimized state.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const minimized = await appWindow.isMinimized();\r\n     * ```\r\n     *\r\n     * @since 1.3.0\r\n     * */\r\n    async isMinimized() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'isMinimized'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current maximized state.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const maximized = await appWindow.isMaximized();\r\n     * ```\r\n     *\r\n     * @returns Whether the window is maximized or not.\r\n     * */\r\n    async isMaximized() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'isMaximized'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current focus state.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const focused = await appWindow.isFocused();\r\n     * ```\r\n     *\r\n     * @returns Whether the window is focused or not.\r\n     *\r\n     * @since 1.4\r\n     * */\r\n    async isFocused() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'isFocused'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current decorated state.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const decorated = await appWindow.isDecorated();\r\n     * ```\r\n     *\r\n     * @returns Whether the window is decorated or not.\r\n     *  */\r\n    async isDecorated() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'isDecorated'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current resizable state.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const resizable = await appWindow.isResizable();\r\n     * ```\r\n     *\r\n     * @returns Whether the window is resizable or not.\r\n     *  */\r\n    async isResizable() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'isResizable'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window’s native maximize button state.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Linux / iOS / Android:** Unsupported.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const maximizable = await appWindow.isMaximizable();\r\n     * ```\r\n     *\r\n     * @returns Whether the window's native maximize button is enabled or not.\r\n     *  */\r\n    async isMaximizable() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'isMaximizable'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window’s native minimize button state.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Linux / iOS / Android:** Unsupported.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const minimizable = await appWindow.isMinimizable();\r\n     * ```\r\n     *\r\n     * @returns Whether the window's native minimize button is enabled or not.\r\n     *  */\r\n    async isMinimizable() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'isMinimizable'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window’s native close button state.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Linux / iOS / Android:** Unsupported.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const closable = await appWindow.isClosable();\r\n     * ```\r\n     *\r\n     * @returns Whether the window's native close button is enabled or not.\r\n     *  */\r\n    async isClosable() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'isClosable'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current visible state.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const visible = await appWindow.isVisible();\r\n     * ```\r\n     *\r\n     * @returns Whether the window is visible or not.\r\n     *  */\r\n    async isVisible() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'isVisible'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current title.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const title = await appWindow.title();\r\n     * ```\r\n     *\r\n     * @since 1.3.0\r\n     * */\r\n    async title() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'title'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current theme.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **macOS:** Theme was introduced on macOS 10.14. Returns `light` on macOS 10.13 and below.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * const theme = await appWindow.theme();\r\n     * ```\r\n     *\r\n     * @returns The window theme.\r\n     * */\r\n    async theme() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'theme'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    // Setters\r\n    /**\r\n     * Centers the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.center();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async center() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'center'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     *  Requests user attention to the window, this has no effect if the application\r\n     * is already focused. How requesting for user attention manifests is platform dependent,\r\n     * see `UserAttentionType` for details.\r\n     *\r\n     * Providing `null` will unset the request for user attention. Unsetting the request for\r\n     * user attention might not be done automatically by the WM when the window receives input.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **macOS:** `null` has no effect.\r\n     * - **Linux:** Urgency levels have the same effect.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.requestUserAttention();\r\n     * ```\r\n     *\r\n     * @param requestType\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async requestUserAttention(requestType) {\r\n        let requestType_ = null;\r\n        if (requestType) {\r\n            if (requestType === UserAttentionType.Critical) {\r\n                requestType_ = { type: 'Critical' };\r\n            }\r\n            else {\r\n                requestType_ = { type: 'Informational' };\r\n            }\r\n        }\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'requestUserAttention',\r\n                        payload: requestType_\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Updates the window resizable flag.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setResizable(false);\r\n     * ```\r\n     *\r\n     * @param resizable\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setResizable(resizable) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setResizable',\r\n                        payload: resizable\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sets whether the window's native maximize button is enabled or not.\r\n     * If resizable is set to false, this setting is ignored.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **macOS:** Disables the \"zoom\" button in the window titlebar, which is also used to enter fullscreen mode.\r\n     * - **Linux / iOS / Android:** Unsupported.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setMaximizable(false);\r\n     * ```\r\n     *\r\n     * @param maximizable\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setMaximizable(maximizable) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setMaximizable',\r\n                        payload: maximizable\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sets whether the window's native minimize button is enabled or not.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Linux / iOS / Android:** Unsupported.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setMinimizable(false);\r\n     * ```\r\n     *\r\n     * @param minimizable\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setMinimizable(minimizable) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setMinimizable',\r\n                        payload: minimizable\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sets whether the window's native close button is enabled or not.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Linux:** GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible\r\n     * - **iOS / Android:** Unsupported.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setClosable(false);\r\n     * ```\r\n     *\r\n     * @param closable\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setClosable(closable) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setClosable',\r\n                        payload: closable\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window title.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setTitle('Tauri');\r\n     * ```\r\n     *\r\n     * @param title The new title\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setTitle(title) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setTitle',\r\n                        payload: title\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Maximizes the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.maximize();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async maximize() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'maximize'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Unmaximizes the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.unmaximize();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async unmaximize() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'unmaximize'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Toggles the window maximized state.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.toggleMaximize();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async toggleMaximize() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'toggleMaximize'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Minimizes the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.minimize();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async minimize() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'minimize'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Unminimizes the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.unminimize();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async unminimize() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'unminimize'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window visibility to true.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.show();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async show() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'show'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window visibility to false.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.hide();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async hide() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'hide'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Closes the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.close();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async close() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'close'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Whether the window should have borders and bars.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setDecorations(false);\r\n     * ```\r\n     *\r\n     * @param decorations Whether the window should have borders and bars.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setDecorations(decorations) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setDecorations',\r\n                        payload: decorations\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Whether the window should always be on top of other windows.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setAlwaysOnTop(true);\r\n     * ```\r\n     *\r\n     * @param alwaysOnTop Whether the window should always be on top of other windows or not.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setAlwaysOnTop(alwaysOnTop) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setAlwaysOnTop',\r\n                        payload: alwaysOnTop\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Prevents the window contents from being captured by other apps.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setContentProtected(true);\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     *\r\n     * @since 1.2.0\r\n     */\r\n    async setContentProtected(protected_) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setContentProtected',\r\n                        payload: protected_\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Resizes the window with a new inner size.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow, LogicalSize } from '@tauri-apps/api/window';\r\n     * await appWindow.setSize(new LogicalSize(600, 500));\r\n     * ```\r\n     *\r\n     * @param size The logical or physical inner size.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setSize(size) {\r\n        if (!size || (size.type !== 'Logical' && size.type !== 'Physical')) {\r\n            throw new Error('the `size` argument must be either a LogicalSize or a PhysicalSize instance');\r\n        }\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setSize',\r\n                        payload: {\r\n                            type: size.type,\r\n                            data: {\r\n                                width: size.width,\r\n                                height: size.height\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow, PhysicalSize } from '@tauri-apps/api/window';\r\n     * await appWindow.setMinSize(new PhysicalSize(600, 500));\r\n     * ```\r\n     *\r\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setMinSize(size) {\r\n        if (size && size.type !== 'Logical' && size.type !== 'Physical') {\r\n            throw new Error('the `size` argument must be either a LogicalSize or a PhysicalSize instance');\r\n        }\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setMinSize',\r\n                        payload: size\r\n                            ? {\r\n                                type: size.type,\r\n                                data: {\r\n                                    width: size.width,\r\n                                    height: size.height\r\n                                }\r\n                            }\r\n                            : null\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow, LogicalSize } from '@tauri-apps/api/window';\r\n     * await appWindow.setMaxSize(new LogicalSize(600, 500));\r\n     * ```\r\n     *\r\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setMaxSize(size) {\r\n        if (size && size.type !== 'Logical' && size.type !== 'Physical') {\r\n            throw new Error('the `size` argument must be either a LogicalSize or a PhysicalSize instance');\r\n        }\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setMaxSize',\r\n                        payload: size\r\n                            ? {\r\n                                type: size.type,\r\n                                data: {\r\n                                    width: size.width,\r\n                                    height: size.height\r\n                                }\r\n                            }\r\n                            : null\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window outer position.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow, LogicalPosition } from '@tauri-apps/api/window';\r\n     * await appWindow.setPosition(new LogicalPosition(600, 500));\r\n     * ```\r\n     *\r\n     * @param position The new position, in logical or physical pixels.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setPosition(position) {\r\n        if (!position ||\r\n            (position.type !== 'Logical' && position.type !== 'Physical')) {\r\n            throw new Error('the `position` argument must be either a LogicalPosition or a PhysicalPosition instance');\r\n        }\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setPosition',\r\n                        payload: {\r\n                            type: position.type,\r\n                            data: {\r\n                                x: position.x,\r\n                                y: position.y\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window fullscreen state.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setFullscreen(true);\r\n     * ```\r\n     *\r\n     * @param fullscreen Whether the window should go to fullscreen or not.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setFullscreen(fullscreen) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setFullscreen',\r\n                        payload: fullscreen\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Bring the window to front and focus.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setFocus();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setFocus() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setFocus'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window icon.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setIcon('/tauri/awesome.png');\r\n     * ```\r\n     *\r\n     * Note that you need the `icon-ico` or `icon-png` Cargo features to use this API.\r\n     * To enable it, change your Cargo.toml file:\r\n     * ```toml\r\n     * [dependencies]\r\n     * tauri = { version = \"...\", features = [\"...\", \"icon-png\"] }\r\n     * ```\r\n     *\r\n     * @param icon Icon bytes or path to the icon file.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setIcon(icon) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setIcon',\r\n                        payload: {\r\n                            // correctly serialize Uint8Arrays\r\n                            icon: typeof icon === 'string' ? icon : Array.from(icon)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Whether the window icon should be hidden from the taskbar or not.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **macOS:** Unsupported.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setSkipTaskbar(true);\r\n     * ```\r\n     *\r\n     * @param skip true to hide window icon, false to show it.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setSkipTaskbar(skip) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setSkipTaskbar',\r\n                        payload: skip\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Grabs the cursor, preventing it from leaving the window.\r\n     *\r\n     * There's no guarantee that the cursor will be hidden. You should\r\n     * hide it by yourself if you want so.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Linux:** Unsupported.\r\n     * - **macOS:** This locks the cursor in a fixed location, which looks visually awkward.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setCursorGrab(true);\r\n     * ```\r\n     *\r\n     * @param grab `true` to grab the cursor icon, `false` to release it.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setCursorGrab(grab) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setCursorGrab',\r\n                        payload: grab\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Modifies the cursor's visibility.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Windows:** The cursor is only hidden within the confines of the window.\r\n     * - **macOS:** The cursor is hidden as long as the window has input focus, even if the cursor is\r\n     *   outside of the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setCursorVisible(false);\r\n     * ```\r\n     *\r\n     * @param visible If `false`, this will hide the cursor. If `true`, this will show the cursor.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setCursorVisible(visible) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setCursorVisible',\r\n                        payload: visible\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Modifies the cursor icon of the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setCursorIcon('help');\r\n     * ```\r\n     *\r\n     * @param icon The new cursor icon.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setCursorIcon(icon) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setCursorIcon',\r\n                        payload: icon\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Changes the position of the cursor in window coordinates.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow, LogicalPosition } from '@tauri-apps/api/window';\r\n     * await appWindow.setCursorPosition(new LogicalPosition(600, 300));\r\n     * ```\r\n     *\r\n     * @param position The new cursor position.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setCursorPosition(position) {\r\n        if (!position ||\r\n            (position.type !== 'Logical' && position.type !== 'Physical')) {\r\n            throw new Error('the `position` argument must be either a LogicalPosition or a PhysicalPosition instance');\r\n        }\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setCursorPosition',\r\n                        payload: {\r\n                            type: position.type,\r\n                            data: {\r\n                                x: position.x,\r\n                                y: position.y\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Changes the cursor events behavior.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.setIgnoreCursorEvents(true);\r\n     * ```\r\n     *\r\n     * @param ignore `true` to ignore the cursor events; `false` to process them as usual.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setIgnoreCursorEvents(ignore) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'setIgnoreCursorEvents',\r\n                        payload: ignore\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Starts dragging the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from '@tauri-apps/api/window';\r\n     * await appWindow.startDragging();\r\n     * ```\r\n     *\r\n     * @return A promise indicating the success or failure of the operation.\r\n     */\r\n    async startDragging() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Window',\r\n            message: {\r\n                cmd: 'manage',\r\n                data: {\r\n                    label: this.label,\r\n                    cmd: {\r\n                        type: 'startDragging'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    // Listeners\r\n    /**\r\n     * Listen to window resize.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from \"@tauri-apps/api/window\";\r\n     * const unlisten = await appWindow.onResized(({ payload: size }) => {\r\n     *  console.log('Window resized', size);\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     *\r\n     * @since 1.0.2\r\n     */\r\n    async onResized(handler) {\r\n        return this.listen(TauriEvent.WINDOW_RESIZED, (e) => {\r\n            e.payload = mapPhysicalSize(e.payload);\r\n            handler(e);\r\n        });\r\n    }\r\n    /**\r\n     * Listen to window move.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from \"@tauri-apps/api/window\";\r\n     * const unlisten = await appWindow.onMoved(({ payload: position }) => {\r\n     *  console.log('Window moved', position);\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     *\r\n     * @since 1.0.2\r\n     */\r\n    async onMoved(handler) {\r\n        return this.listen(TauriEvent.WINDOW_MOVED, (e) => {\r\n            e.payload = mapPhysicalPosition(e.payload);\r\n            handler(e);\r\n        });\r\n    }\r\n    /**\r\n     * Listen to window close requested. Emitted when the user requests to closes the window.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from \"@tauri-apps/api/window\";\r\n     * import { confirm } from '@tauri-apps/api/dialog';\r\n     * const unlisten = await appWindow.onCloseRequested(async (event) => {\r\n     *   const confirmed = await confirm('Are you sure?');\r\n     *   if (!confirmed) {\r\n     *     // user did not confirm closing the window; let's prevent it\r\n     *     event.preventDefault();\r\n     *   }\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     *\r\n     * @since 1.0.2\r\n     */\r\n    /* eslint-disable @typescript-eslint/promise-function-async */\r\n    async onCloseRequested(handler) {\r\n        return this.listen(TauriEvent.WINDOW_CLOSE_REQUESTED, (event) => {\r\n            const evt = new CloseRequestedEvent(event);\r\n            void Promise.resolve(handler(evt)).then(() => {\r\n                if (!evt.isPreventDefault()) {\r\n                    return this.close();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /* eslint-enable */\r\n    /**\r\n     * Listen to window focus change.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from \"@tauri-apps/api/window\";\r\n     * const unlisten = await appWindow.onFocusChanged(({ payload: focused }) => {\r\n     *  console.log('Focus changed, window is focused? ' + focused);\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     *\r\n     * @since 1.0.2\r\n     */\r\n    async onFocusChanged(handler) {\r\n        const unlistenFocus = await this.listen(TauriEvent.WINDOW_FOCUS, (event) => {\r\n            handler({ ...event, payload: true });\r\n        });\r\n        const unlistenBlur = await this.listen(TauriEvent.WINDOW_BLUR, (event) => {\r\n            handler({ ...event, payload: false });\r\n        });\r\n        return () => {\r\n            unlistenFocus();\r\n            unlistenBlur();\r\n        };\r\n    }\r\n    /**\r\n     * Listen to window scale change. Emitted when the window's scale factor has changed.\r\n     * The following user actions can cause DPI changes:\r\n     * - Changing the display's resolution.\r\n     * - Changing the display's scale factor (e.g. in Control Panel on Windows).\r\n     * - Moving the window to a display with a different scale factor.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from \"@tauri-apps/api/window\";\r\n     * const unlisten = await appWindow.onScaleChanged(({ payload }) => {\r\n     *  console.log('Scale changed', payload.scaleFactor, payload.size);\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     *\r\n     * @since 1.0.2\r\n     */\r\n    async onScaleChanged(handler) {\r\n        return this.listen(TauriEvent.WINDOW_SCALE_FACTOR_CHANGED, handler);\r\n    }\r\n    /**\r\n     * Listen to the window menu item click. The payload is the item id.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from \"@tauri-apps/api/window\";\r\n     * const unlisten = await appWindow.onMenuClicked(({ payload: menuId }) => {\r\n     *  console.log('Menu clicked: ' + menuId);\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     *\r\n     * @since 1.0.2\r\n     */\r\n    async onMenuClicked(handler) {\r\n        return this.listen(TauriEvent.MENU, handler);\r\n    }\r\n    /**\r\n     * Listen to a file drop event.\r\n     * The listener is triggered when the user hovers the selected files on the window,\r\n     * drops the files or cancels the operation.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from \"@tauri-apps/api/window\";\r\n     * const unlisten = await appWindow.onFileDropEvent((event) => {\r\n     *  if (event.payload.type === 'hover') {\r\n     *    console.log('User hovering', event.payload.paths);\r\n     *  } else if (event.payload.type === 'drop') {\r\n     *    console.log('User dropped', event.payload.paths);\r\n     *  } else {\r\n     *    console.log('File drop cancelled');\r\n     *  }\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     *\r\n     * @since 1.0.2\r\n     */\r\n    async onFileDropEvent(handler) {\r\n        const unlistenFileDrop = await this.listen(TauriEvent.WINDOW_FILE_DROP, (event) => {\r\n            handler({ ...event, payload: { type: 'drop', paths: event.payload } });\r\n        });\r\n        const unlistenFileHover = await this.listen(TauriEvent.WINDOW_FILE_DROP_HOVER, (event) => {\r\n            handler({ ...event, payload: { type: 'hover', paths: event.payload } });\r\n        });\r\n        const unlistenCancel = await this.listen(TauriEvent.WINDOW_FILE_DROP_CANCELLED, (event) => {\r\n            handler({ ...event, payload: { type: 'cancel' } });\r\n        });\r\n        return () => {\r\n            unlistenFileDrop();\r\n            unlistenFileHover();\r\n            unlistenCancel();\r\n        };\r\n    }\r\n    /**\r\n     * Listen to the system theme change.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { appWindow } from \"@tauri-apps/api/window\";\r\n     * const unlisten = await appWindow.onThemeChanged(({ payload: theme }) => {\r\n     *  console.log('New theme: ' + theme);\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     *\r\n     * @since 1.0.2\r\n     */\r\n    async onThemeChanged(handler) {\r\n        return this.listen(TauriEvent.WINDOW_THEME_CHANGED, handler);\r\n    }\r\n}\r\n/**\r\n * @since 1.0.2\r\n */\r\nclass CloseRequestedEvent {\r\n    constructor(event) {\r\n        this._preventDefault = false;\r\n        this.event = event.event;\r\n        this.windowLabel = event.windowLabel;\r\n        this.id = event.id;\r\n    }\r\n    preventDefault() {\r\n        this._preventDefault = true;\r\n    }\r\n    isPreventDefault() {\r\n        return this._preventDefault;\r\n    }\r\n}\r\n/**\r\n * Create new webview windows and get a handle to existing ones.\r\n *\r\n * Windows are identified by a *label*  a unique identifier that can be used to reference it later.\r\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\r\n *\r\n * @example\r\n * ```typescript\r\n * // loading embedded asset:\r\n * const webview = new WebviewWindow('theUniqueLabel', {\r\n *   url: 'path/to/page.html'\r\n * });\r\n * // alternatively, load a remote URL:\r\n * const webview = new WebviewWindow('theUniqueLabel', {\r\n *   url: 'https://github.com/tauri-apps/tauri'\r\n * });\r\n *\r\n * webview.once('tauri://created', function () {\r\n *  // webview window successfully created\r\n * });\r\n * webview.once('tauri://error', function (e) {\r\n *  // an error happened creating the webview window\r\n * });\r\n *\r\n * // emit an event to the backend\r\n * await webview.emit(\"some event\", \"data\");\r\n * // listen to an event from the backend\r\n * const unlisten = await webview.listen(\"event name\", e => {});\r\n * unlisten();\r\n * ```\r\n *\r\n * @since 1.0.2\r\n */\r\nclass WebviewWindow extends WindowManager {\r\n    /**\r\n     * Creates a new WebviewWindow.\r\n     * @example\r\n     * ```typescript\r\n     * import { WebviewWindow } from '@tauri-apps/api/window';\r\n     * const webview = new WebviewWindow('my-label', {\r\n     *   url: 'https://github.com/tauri-apps/tauri'\r\n     * });\r\n     * webview.once('tauri://created', function () {\r\n     *  // webview window successfully created\r\n     * });\r\n     * webview.once('tauri://error', function (e) {\r\n     *  // an error happened creating the webview window\r\n     * });\r\n     * ```\r\n     *\r\n     * * @param label The unique webview window label. Must be alphanumeric: `a-zA-Z-/:_`.\r\n     * @returns The WebviewWindow instance to communicate with the webview.\r\n     */\r\n    constructor(label, options = {}) {\r\n        super(label);\r\n        // @ts-expect-error `skip` is not a public API so it is not defined in WindowOptions\r\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\r\n            invokeTauriCommand({\r\n                __tauriModule: 'Window',\r\n                message: {\r\n                    cmd: 'createWebview',\r\n                    data: {\r\n                        options: {\r\n                            label,\r\n                            ...options\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n                .then(async () => this.emit('tauri://created'))\r\n                .catch(async (e) => this.emit('tauri://error', e));\r\n        }\r\n    }\r\n    /**\r\n     * Gets the WebviewWindow for the webview associated with the given label.\r\n     * @example\r\n     * ```typescript\r\n     * import { WebviewWindow } from '@tauri-apps/api/window';\r\n     * const mainWindow = WebviewWindow.getByLabel('main');\r\n     * ```\r\n     *\r\n     * @param label The webview window label.\r\n     * @returns The WebviewWindow instance to communicate with the webview or null if the webview doesn't exist.\r\n     */\r\n    static getByLabel(label) {\r\n        if (getAll().some((w) => w.label === label)) {\r\n            // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\r\n            return new WebviewWindow(label, { skip: true });\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     *  Gets the focused window.\r\n     * @example\r\n     * ```typescript\r\n     * import { WebviewWindow } from '@tauri-apps/api/window';\r\n     * const focusedWindow = WebviewWindow.getFocusedWindow();\r\n     * ```\r\n     *\r\n     * @returns The WebviewWindow instance to communicate with the webview or `undefined` if there is not any focused window.\r\n     *\r\n     * @since 1.4\r\n     */\r\n    static async getFocusedWindow() {\r\n        for (const w of getAll()) {\r\n            if (await w.isFocused()) {\r\n                return w;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n/** The WebviewWindow for the current window. */\r\nlet appWindow;\r\nif ('__TAURI_METADATA__' in window) {\r\n    appWindow = new WebviewWindow(window.__TAURI_METADATA__.__currentWindow.label, {\r\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\r\n        skip: true\r\n    });\r\n}\r\nelse {\r\n    console.warn(`Could not find \"window.__TAURI_METADATA__\". The \"appWindow\" value will reference the \"main\" window label.\\nNote that this is not an issue if running this frontend on a browser instead of a Tauri window.`);\r\n    appWindow = new WebviewWindow('main', {\r\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\r\n        skip: true\r\n    });\r\n}\r\nfunction mapMonitor(m) {\r\n    return m === null\r\n        ? null\r\n        : {\r\n            name: m.name,\r\n            scaleFactor: m.scaleFactor,\r\n            position: mapPhysicalPosition(m.position),\r\n            size: mapPhysicalSize(m.size)\r\n        };\r\n}\r\nfunction mapPhysicalPosition(m) {\r\n    return new PhysicalPosition(m.x, m.y);\r\n}\r\nfunction mapPhysicalSize(m) {\r\n    return new PhysicalSize(m.width, m.height);\r\n}\r\n/**\r\n * Returns the monitor on which the window currently resides.\r\n * Returns `null` if current monitor can't be detected.\r\n * @example\r\n * ```typescript\r\n * import { currentMonitor } from '@tauri-apps/api/window';\r\n * const monitor = currentMonitor();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function currentMonitor() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Window',\r\n        message: {\r\n            cmd: 'manage',\r\n            data: {\r\n                cmd: {\r\n                    type: 'currentMonitor'\r\n                }\r\n            }\r\n        }\r\n    }).then(mapMonitor);\r\n}\r\n/**\r\n * Returns the primary monitor of the system.\r\n * Returns `null` if it can't identify any monitor as a primary one.\r\n * @example\r\n * ```typescript\r\n * import { primaryMonitor } from '@tauri-apps/api/window';\r\n * const monitor = primaryMonitor();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function primaryMonitor() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Window',\r\n        message: {\r\n            cmd: 'manage',\r\n            data: {\r\n                cmd: {\r\n                    type: 'primaryMonitor'\r\n                }\r\n            }\r\n        }\r\n    }).then(mapMonitor);\r\n}\r\n/**\r\n * Returns the list of all the monitors available on the system.\r\n * @example\r\n * ```typescript\r\n * import { availableMonitors } from '@tauri-apps/api/window';\r\n * const monitors = availableMonitors();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function availableMonitors() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Window',\r\n        message: {\r\n            cmd: 'manage',\r\n            data: {\r\n                cmd: {\r\n                    type: 'availableMonitors'\r\n                }\r\n            }\r\n        }\r\n    }).then((ms) => ms.map(mapMonitor));\r\n}\r\n\r\nexport { CloseRequestedEvent, LogicalPosition, LogicalSize, PhysicalPosition, PhysicalSize, UserAttentionType, WebviewWindow, WebviewWindowHandle, WindowManager, appWindow, availableMonitors, currentMonitor, getAll, getCurrent, primaryMonitor };\r\n"],
  "mappings": "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",
  "names": ["UserAttentionType"]
}
