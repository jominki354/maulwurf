{
  "version": 3,
  "sources": ["../../@tauri-apps/api/fs.js"],
  "sourcesContent": ["import { invokeTauriCommand } from './helpers/tauri.js';\r\n\r\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\r\n// SPDX-License-Identifier: Apache-2.0\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * Access the file system.\r\n *\r\n * This package is also accessible with `window.__TAURI__.fs` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\r\n *\r\n * The APIs must be added to [`tauri.allowlist.fs`](https://tauri.app/v1/api/config/#allowlistconfig.fs) in `tauri.conf.json`:\r\n * ```json\r\n * {\r\n *   \"tauri\": {\r\n *     \"allowlist\": {\r\n *       \"fs\": {\r\n *         \"all\": true, // enable all FS APIs\r\n *         \"readFile\": true,\r\n *         \"writeFile\": true,\r\n *         \"readDir\": true,\r\n *         \"copyFile\": true,\r\n *         \"createDir\": true,\r\n *         \"removeDir\": true,\r\n *         \"removeFile\": true,\r\n *         \"renameFile\": true,\r\n *         \"exists\": true\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\r\n *\r\n * ## Security\r\n *\r\n * This module prevents path traversal, not allowing absolute paths or parent dir components\r\n * (i.e. \"/usr/path/to/file\" or \"../path/to/file\" paths are not allowed).\r\n * Paths accessed with this API must be relative to one of the {@link BaseDirectory | base directories}\r\n * so if you need access to arbitrary filesystem paths, you must write such logic on the core layer instead.\r\n *\r\n * The API has a scope configuration that forces you to restrict the paths that can be accessed using glob patterns.\r\n *\r\n * The scope configuration is an array of glob patterns describing folder paths that are allowed.\r\n * For instance, this scope configuration only allows accessing files on the\r\n * *databases* folder of the {@link path.appDataDir | $APPDATA directory}:\r\n * ```json\r\n * {\r\n *   \"tauri\": {\r\n *     \"allowlist\": {\r\n *       \"fs\": {\r\n *         \"scope\": [\"$APPDATA/databases/*\"]\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * Notice the use of the `$APPDATA` variable. The value is injected at runtime, resolving to the {@link path.appDataDir | app data directory}.\r\n * The available variables are:\r\n * {@link path.appConfigDir | `$APPCONFIG`}, {@link path.appDataDir | `$APPDATA`}, {@link path.appLocalDataDir | `$APPLOCALDATA`},\r\n * {@link path.appCacheDir | `$APPCACHE`}, {@link path.appLogDir | `$APPLOG`},\r\n * {@link path.audioDir | `$AUDIO`}, {@link path.cacheDir | `$CACHE`}, {@link path.configDir | `$CONFIG`}, {@link path.dataDir | `$DATA`},\r\n * {@link path.localDataDir | `$LOCALDATA`}, {@link path.desktopDir | `$DESKTOP`}, {@link path.documentDir | `$DOCUMENT`},\r\n * {@link path.downloadDir | `$DOWNLOAD`}, {@link path.executableDir | `$EXE`}, {@link path.fontDir | `$FONT`}, {@link path.homeDir | `$HOME`},\r\n * {@link path.pictureDir | `$PICTURE`}, {@link path.publicDir | `$PUBLIC`}, {@link path.runtimeDir | `$RUNTIME`},\r\n * {@link path.templateDir | `$TEMPLATE`}, {@link path.videoDir | `$VIDEO`}, {@link path.resourceDir | `$RESOURCE`}, {@link path.appDir | `$APP`},\r\n * {@link path.logDir | `$LOG`}, {@link os.tempdir | `$TEMP`}.\r\n *\r\n * Trying to execute any API with a URL not configured on the scope results in a promise rejection due to denied access.\r\n *\r\n * Note that this scope applies to **all** APIs on this module.\r\n *\r\n * @module\r\n */\r\n/**\r\n * @since 1.0.0\r\n */\r\nvar BaseDirectory;\r\n(function (BaseDirectory) {\r\n    BaseDirectory[BaseDirectory[\"Audio\"] = 1] = \"Audio\";\r\n    BaseDirectory[BaseDirectory[\"Cache\"] = 2] = \"Cache\";\r\n    BaseDirectory[BaseDirectory[\"Config\"] = 3] = \"Config\";\r\n    BaseDirectory[BaseDirectory[\"Data\"] = 4] = \"Data\";\r\n    BaseDirectory[BaseDirectory[\"LocalData\"] = 5] = \"LocalData\";\r\n    BaseDirectory[BaseDirectory[\"Desktop\"] = 6] = \"Desktop\";\r\n    BaseDirectory[BaseDirectory[\"Document\"] = 7] = \"Document\";\r\n    BaseDirectory[BaseDirectory[\"Download\"] = 8] = \"Download\";\r\n    BaseDirectory[BaseDirectory[\"Executable\"] = 9] = \"Executable\";\r\n    BaseDirectory[BaseDirectory[\"Font\"] = 10] = \"Font\";\r\n    BaseDirectory[BaseDirectory[\"Home\"] = 11] = \"Home\";\r\n    BaseDirectory[BaseDirectory[\"Picture\"] = 12] = \"Picture\";\r\n    BaseDirectory[BaseDirectory[\"Public\"] = 13] = \"Public\";\r\n    BaseDirectory[BaseDirectory[\"Runtime\"] = 14] = \"Runtime\";\r\n    BaseDirectory[BaseDirectory[\"Template\"] = 15] = \"Template\";\r\n    BaseDirectory[BaseDirectory[\"Video\"] = 16] = \"Video\";\r\n    BaseDirectory[BaseDirectory[\"Resource\"] = 17] = \"Resource\";\r\n    BaseDirectory[BaseDirectory[\"App\"] = 18] = \"App\";\r\n    BaseDirectory[BaseDirectory[\"Log\"] = 19] = \"Log\";\r\n    BaseDirectory[BaseDirectory[\"Temp\"] = 20] = \"Temp\";\r\n    BaseDirectory[BaseDirectory[\"AppConfig\"] = 21] = \"AppConfig\";\r\n    BaseDirectory[BaseDirectory[\"AppData\"] = 22] = \"AppData\";\r\n    BaseDirectory[BaseDirectory[\"AppLocalData\"] = 23] = \"AppLocalData\";\r\n    BaseDirectory[BaseDirectory[\"AppCache\"] = 24] = \"AppCache\";\r\n    BaseDirectory[BaseDirectory[\"AppLog\"] = 25] = \"AppLog\";\r\n})(BaseDirectory || (BaseDirectory = {}));\r\n/**\r\n * Reads a file as an UTF-8 encoded string.\r\n * @example\r\n * ```typescript\r\n * import { readTextFile, BaseDirectory } from '@tauri-apps/api/fs';\r\n * // Read the text file in the `$APPCONFIG/app.conf` path\r\n * const contents = await readTextFile('app.conf', { dir: BaseDirectory.AppConfig });\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function readTextFile(filePath, options = {}) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Fs',\r\n        message: {\r\n            cmd: 'readTextFile',\r\n            path: filePath,\r\n            options\r\n        }\r\n    });\r\n}\r\n/**\r\n * Reads a file as byte array.\r\n * @example\r\n * ```typescript\r\n * import { readBinaryFile, BaseDirectory } from '@tauri-apps/api/fs';\r\n * // Read the image file in the `$RESOURCEDIR/avatar.png` path\r\n * const contents = await readBinaryFile('avatar.png', { dir: BaseDirectory.Resource });\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function readBinaryFile(filePath, options = {}) {\r\n    const arr = await invokeTauriCommand({\r\n        __tauriModule: 'Fs',\r\n        message: {\r\n            cmd: 'readFile',\r\n            path: filePath,\r\n            options\r\n        }\r\n    });\r\n    return Uint8Array.from(arr);\r\n}\r\n/**\r\n * Writes a UTF-8 text file.\r\n *\r\n * @returns A promise indicating the success or failure of the operation.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function writeTextFile(path, contents, options) {\r\n    if (typeof options === 'object') {\r\n        Object.freeze(options);\r\n    }\r\n    if (typeof path === 'object') {\r\n        Object.freeze(path);\r\n    }\r\n    const file = { path: '', contents: '' };\r\n    let fileOptions = options;\r\n    if (typeof path === 'string') {\r\n        file.path = path;\r\n    }\r\n    else {\r\n        file.path = path.path;\r\n        file.contents = path.contents;\r\n    }\r\n    if (typeof contents === 'string') {\r\n        file.contents = contents !== null && contents !== void 0 ? contents : '';\r\n    }\r\n    else {\r\n        fileOptions = contents;\r\n    }\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Fs',\r\n        message: {\r\n            cmd: 'writeFile',\r\n            path: file.path,\r\n            contents: Array.from(new TextEncoder().encode(file.contents)),\r\n            options: fileOptions\r\n        }\r\n    });\r\n}\r\n/**\r\n * Writes a byte array content to a file.\r\n *\r\n * @returns A promise indicating the success or failure of the operation.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function writeBinaryFile(path, contents, options) {\r\n    if (typeof options === 'object') {\r\n        Object.freeze(options);\r\n    }\r\n    if (typeof path === 'object') {\r\n        Object.freeze(path);\r\n    }\r\n    const file = { path: '', contents: [] };\r\n    let fileOptions = options;\r\n    if (typeof path === 'string') {\r\n        file.path = path;\r\n    }\r\n    else {\r\n        file.path = path.path;\r\n        file.contents = path.contents;\r\n    }\r\n    if (contents && 'dir' in contents) {\r\n        fileOptions = contents;\r\n    }\r\n    else if (typeof path === 'string') {\r\n        // @ts-expect-error in this case `contents` is always a BinaryFileContents\r\n        file.contents = contents !== null && contents !== void 0 ? contents : [];\r\n    }\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Fs',\r\n        message: {\r\n            cmd: 'writeFile',\r\n            path: file.path,\r\n            contents: Array.from(file.contents instanceof ArrayBuffer\r\n                ? new Uint8Array(file.contents)\r\n                : file.contents),\r\n            options: fileOptions\r\n        }\r\n    });\r\n}\r\n/**\r\n * List directory files.\r\n * @example\r\n * ```typescript\r\n * import { readDir, BaseDirectory } from '@tauri-apps/api/fs';\r\n * // Reads the `$APPDATA/users` directory recursively\r\n * const entries = await readDir('users', { dir: BaseDirectory.AppData, recursive: true });\r\n *\r\n * function processEntries(entries) {\r\n *   for (const entry of entries) {\r\n *     console.log(`Entry: ${entry.path}`);\r\n *     if (entry.children) {\r\n *       processEntries(entry.children)\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function readDir(dir, options = {}) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Fs',\r\n        message: {\r\n            cmd: 'readDir',\r\n            path: dir,\r\n            options\r\n        }\r\n    });\r\n}\r\n/**\r\n * Creates a directory.\r\n * If one of the path's parent components doesn't exist\r\n * and the `recursive` option isn't set to true, the promise will be rejected.\r\n * @example\r\n * ```typescript\r\n * import { createDir, BaseDirectory } from '@tauri-apps/api/fs';\r\n * // Create the `$APPDATA/users` directory\r\n * await createDir('users', { dir: BaseDirectory.AppData, recursive: true });\r\n * ```\r\n *\r\n * @returns A promise indicating the success or failure of the operation.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function createDir(dir, options = {}) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Fs',\r\n        message: {\r\n            cmd: 'createDir',\r\n            path: dir,\r\n            options\r\n        }\r\n    });\r\n}\r\n/**\r\n * Removes a directory.\r\n * If the directory is not empty and the `recursive` option isn't set to true, the promise will be rejected.\r\n * @example\r\n * ```typescript\r\n * import { removeDir, BaseDirectory } from '@tauri-apps/api/fs';\r\n * // Remove the directory `$APPDATA/users`\r\n * await removeDir('users', { dir: BaseDirectory.AppData });\r\n * ```\r\n *\r\n * @returns A promise indicating the success or failure of the operation.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function removeDir(dir, options = {}) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Fs',\r\n        message: {\r\n            cmd: 'removeDir',\r\n            path: dir,\r\n            options\r\n        }\r\n    });\r\n}\r\n/**\r\n * Copies a file to a destination.\r\n * @example\r\n * ```typescript\r\n * import { copyFile, BaseDirectory } from '@tauri-apps/api/fs';\r\n * // Copy the `$APPCONFIG/app.conf` file to `$APPCONFIG/app.conf.bk`\r\n * await copyFile('app.conf', 'app.conf.bk', { dir: BaseDirectory.AppConfig });\r\n * ```\r\n *\r\n * @returns A promise indicating the success or failure of the operation.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function copyFile(source, destination, options = {}) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Fs',\r\n        message: {\r\n            cmd: 'copyFile',\r\n            source,\r\n            destination,\r\n            options\r\n        }\r\n    });\r\n}\r\n/**\r\n * Removes a file.\r\n * @example\r\n * ```typescript\r\n * import { removeFile, BaseDirectory } from '@tauri-apps/api/fs';\r\n * // Remove the `$APPConfig/app.conf` file\r\n * await removeFile('app.conf', { dir: BaseDirectory.AppConfig });\r\n * ```\r\n *\r\n * @returns A promise indicating the success or failure of the operation.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function removeFile(file, options = {}) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Fs',\r\n        message: {\r\n            cmd: 'removeFile',\r\n            path: file,\r\n            options\r\n        }\r\n    });\r\n}\r\n/**\r\n * Renames a file.\r\n * @example\r\n * ```typescript\r\n * import { renameFile, BaseDirectory } from '@tauri-apps/api/fs';\r\n * // Rename the `$APPDATA/avatar.png` file\r\n * await renameFile('avatar.png', 'deleted.png', { dir: BaseDirectory.AppData });\r\n * ```\r\n *\r\n * @returns A promise indicating the success or failure of the operation.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function renameFile(oldPath, newPath, options = {}) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Fs',\r\n        message: {\r\n            cmd: 'renameFile',\r\n            oldPath,\r\n            newPath,\r\n            options\r\n        }\r\n    });\r\n}\r\n/**\r\n * Check if a path exists.\r\n * @example\r\n * ```typescript\r\n * import { exists, BaseDirectory } from '@tauri-apps/api/fs';\r\n * // Check if the `$APPDATA/avatar.png` file exists\r\n * await exists('avatar.png', { dir: BaseDirectory.AppData });\r\n * ```\r\n *\r\n * @since 1.1.0\r\n */\r\nasync function exists(path, options = {}) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Fs',\r\n        message: {\r\n            cmd: 'exists',\r\n            path,\r\n            options\r\n        }\r\n    });\r\n}\r\n\r\nexport { BaseDirectory, BaseDirectory as Dir, copyFile, createDir, exists, readBinaryFile, readDir, readTextFile, removeDir, removeFile, renameFile, writeBinaryFile, writeTextFile as writeFile, writeTextFile };\r\n"],
  "mappings": "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",
  "names": ["BaseDirectory"]
}
