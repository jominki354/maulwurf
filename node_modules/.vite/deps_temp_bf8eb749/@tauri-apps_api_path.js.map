{
  "version": 3,
  "sources": ["../../@tauri-apps/api/helpers/os-check.js", "../../@tauri-apps/api/path.js"],
  "sourcesContent": ["// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\r\n// SPDX-License-Identifier: Apache-2.0\r\n// SPDX-License-Identifier: MIT\r\n/** @ignore */\r\nfunction isWindows() {\r\n    return navigator.appVersion.includes('Win');\r\n}\r\n\r\nexport { isWindows };\r\n", "import { invokeTauriCommand } from './helpers/tauri.js';\r\nimport { BaseDirectory } from './fs.js';\r\nimport { isWindows } from './helpers/os-check.js';\r\n\r\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\r\n// SPDX-License-Identifier: Apache-2.0\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * The path module provides utilities for working with file and directory paths.\r\n *\r\n * This package is also accessible with `window.__TAURI__.path` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\r\n *\r\n * The APIs must be added to [`tauri.allowlist.path`](https://tauri.app/v1/api/config/#allowlistconfig.path) in `tauri.conf.json`:\r\n * ```json\r\n * {\r\n *   \"tauri\": {\r\n *     \"allowlist\": {\r\n *       \"path\": {\r\n *         \"all\": true, // enable all Path APIs\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\r\n * @module\r\n */\r\n/**\r\n * Returns the path to the suggested directory for your app config files.\r\n *\r\n * @deprecated since 1.2.0: Will be removed in 2.0.0. Use {@link appConfigDir} or {@link appDataDir} instead.\r\n * @since 1.0.0\r\n */\r\nasync function appDir() {\r\n    return appConfigDir();\r\n}\r\n/**\r\n * Returns the path to the suggested directory for your app's config files.\r\n * Resolves to `${configDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\r\n * @example\r\n * ```typescript\r\n * import { appConfigDir } from '@tauri-apps/api/path';\r\n * const appConfigDirPath = await appConfigDir();\r\n * ```\r\n *\r\n * @since 1.2.0\r\n */\r\nasync function appConfigDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.AppConfig\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the suggested directory for your app's data files.\r\n * Resolves to `${dataDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\r\n * @example\r\n * ```typescript\r\n * import { appDataDir } from '@tauri-apps/api/path';\r\n * const appDataDirPath = await appDataDir();\r\n * ```\r\n *\r\n * @since 1.2.0\r\n */\r\nasync function appDataDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.AppData\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the suggested directory for your app's local data files.\r\n * Resolves to `${localDataDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\r\n * @example\r\n * ```typescript\r\n * import { appLocalDataDir } from '@tauri-apps/api/path';\r\n * const appLocalDataDirPath = await appLocalDataDir();\r\n * ```\r\n *\r\n * @since 1.2.0\r\n */\r\nasync function appLocalDataDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.AppLocalData\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the suggested directory for your app's cache files.\r\n * Resolves to `${cacheDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\r\n * @example\r\n * ```typescript\r\n * import { appCacheDir } from '@tauri-apps/api/path';\r\n * const appCacheDirPath = await appCacheDir();\r\n * ```\r\n *\r\n * @since 1.2.0\r\n */\r\nasync function appCacheDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.AppCache\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's audio directory.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_MUSIC_DIR`.\r\n * - **macOS:** Resolves to `$HOME/Music`.\r\n * - **Windows:** Resolves to `{FOLDERID_Music}`.\r\n * @example\r\n * ```typescript\r\n * import { audioDir } from '@tauri-apps/api/path';\r\n * const audioDirPath = await audioDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function audioDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Audio\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's cache directory.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to `$XDG_CACHE_HOME` or `$HOME/.cache`.\r\n * - **macOS:** Resolves to `$HOME/Library/Caches`.\r\n * - **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\r\n * @example\r\n * ```typescript\r\n * import { cacheDir } from '@tauri-apps/api/path';\r\n * const cacheDirPath = await cacheDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function cacheDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Cache\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's config directory.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to `$XDG_CONFIG_HOME` or `$HOME/.config`.\r\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\r\n * - **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\r\n * @example\r\n * ```typescript\r\n * import { configDir } from '@tauri-apps/api/path';\r\n * const configDirPath = await configDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function configDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Config\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's data directory.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\r\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\r\n * - **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\r\n * @example\r\n * ```typescript\r\n * import { dataDir } from '@tauri-apps/api/path';\r\n * const dataDirPath = await dataDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function dataDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Data\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's desktop directory.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DESKTOP_DIR`.\r\n * - **macOS:** Resolves to `$HOME/Desktop`.\r\n * - **Windows:** Resolves to `{FOLDERID_Desktop}`.\r\n * @example\r\n * ```typescript\r\n * import { desktopDir } from '@tauri-apps/api/path';\r\n * const desktopPath = await desktopDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function desktopDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Desktop\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's document directory.\r\n * @example\r\n * ```typescript\r\n * import { documentDir } from '@tauri-apps/api/path';\r\n * const documentDirPath = await documentDir();\r\n * ```\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOCUMENTS_DIR`.\r\n * - **macOS:** Resolves to `$HOME/Documents`.\r\n * - **Windows:** Resolves to `{FOLDERID_Documents}`.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function documentDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Document\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's download directory.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux**: Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOWNLOAD_DIR`.\r\n * - **macOS**: Resolves to `$HOME/Downloads`.\r\n * - **Windows**: Resolves to `{FOLDERID_Downloads}`.\r\n * @example\r\n * ```typescript\r\n * import { downloadDir } from '@tauri-apps/api/path';\r\n * const downloadDirPath = await downloadDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function downloadDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Download\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's executable directory.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to `$XDG_BIN_HOME/../bin` or `$XDG_DATA_HOME/../bin` or `$HOME/.local/bin`.\r\n * - **macOS:** Not supported.\r\n * - **Windows:** Not supported.\r\n * @example\r\n * ```typescript\r\n * import { executableDir } from '@tauri-apps/api/path';\r\n * const executableDirPath = await executableDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function executableDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Executable\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's font directory.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to `$XDG_DATA_HOME/fonts` or `$HOME/.local/share/fonts`.\r\n * - **macOS:** Resolves to `$HOME/Library/Fonts`.\r\n * - **Windows:** Not supported.\r\n * @example\r\n * ```typescript\r\n * import { fontDir } from '@tauri-apps/api/path';\r\n * const fontDirPath = await fontDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function fontDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Font\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's home directory.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to `$HOME`.\r\n * - **macOS:** Resolves to `$HOME`.\r\n * - **Windows:** Resolves to `{FOLDERID_Profile}`.\r\n * @example\r\n * ```typescript\r\n * import { homeDir } from '@tauri-apps/api/path';\r\n * const homeDirPath = await homeDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function homeDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Home\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's local data directory.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\r\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\r\n * - **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\r\n * @example\r\n * ```typescript\r\n * import { localDataDir } from '@tauri-apps/api/path';\r\n * const localDataDirPath = await localDataDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function localDataDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.LocalData\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's picture directory.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PICTURES_DIR`.\r\n * - **macOS:** Resolves to `$HOME/Pictures`.\r\n * - **Windows:** Resolves to `{FOLDERID_Pictures}`.\r\n * @example\r\n * ```typescript\r\n * import { pictureDir } from '@tauri-apps/api/path';\r\n * const pictureDirPath = await pictureDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function pictureDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Picture\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's public directory.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PUBLICSHARE_DIR`.\r\n * - **macOS:** Resolves to `$HOME/Public`.\r\n * - **Windows:** Resolves to `{FOLDERID_Public}`.\r\n * @example\r\n * ```typescript\r\n * import { publicDir } from '@tauri-apps/api/path';\r\n * const publicDirPath = await publicDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function publicDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Public\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the application's resource directory.\r\n * To resolve a resource path, see the [[resolveResource | `resolveResource API`]].\r\n * @example\r\n * ```typescript\r\n * import { resourceDir } from '@tauri-apps/api/path';\r\n * const resourceDirPath = await resourceDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function resourceDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Resource\r\n        }\r\n    });\r\n}\r\n/**\r\n * Resolve the path to a resource file.\r\n * @example\r\n * ```typescript\r\n * import { resolveResource } from '@tauri-apps/api/path';\r\n * const resourcePath = await resolveResource('script.sh');\r\n * ```\r\n *\r\n * @param resourcePath The path to the resource.\r\n * Must follow the same syntax as defined in `tauri.conf.json > tauri > bundle > resources`, i.e. keeping subfolders and parent dir components (`../`).\r\n * @returns The full path to the resource.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function resolveResource(resourcePath) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: resourcePath,\r\n            directory: BaseDirectory.Resource\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's runtime directory.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to `$XDG_RUNTIME_DIR`.\r\n * - **macOS:** Not supported.\r\n * - **Windows:** Not supported.\r\n * @example\r\n * ```typescript\r\n * import { runtimeDir } from '@tauri-apps/api/path';\r\n * const runtimeDirPath = await runtimeDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function runtimeDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Runtime\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's template directory.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_TEMPLATES_DIR`.\r\n * - **macOS:** Not supported.\r\n * - **Windows:** Resolves to `{FOLDERID_Templates}`.\r\n * @example\r\n * ```typescript\r\n * import { templateDir } from '@tauri-apps/api/path';\r\n * const templateDirPath = await templateDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function templateDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Template\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the user's video directory.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_VIDEOS_DIR`.\r\n * - **macOS:** Resolves to `$HOME/Movies`.\r\n * - **Windows:** Resolves to `{FOLDERID_Videos}`.\r\n * @example\r\n * ```typescript\r\n * import { videoDir } from '@tauri-apps/api/path';\r\n * const videoDirPath = await videoDir();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function videoDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.Video\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the path to the suggested log directory.\r\n *\r\n * @deprecated since 1.2.0: Will be removed in 2.0.0. Use {@link appLogDir} instead.\r\n * @since 1.0.0\r\n */\r\nasync function logDir() {\r\n    return appLogDir();\r\n}\r\n/**\r\n * Returns the path to the suggested directory for your app's log files.\r\n *\r\n * #### Platform-specific\r\n *\r\n * - **Linux:** Resolves to `${configDir}/${bundleIdentifier}/logs`.\r\n * - **macOS:** Resolves to `${homeDir}/Library/Logs/{bundleIdentifier}`\r\n * - **Windows:** Resolves to `${configDir}/${bundleIdentifier}/logs`.\r\n * @example\r\n * ```typescript\r\n * import { appLogDir } from '@tauri-apps/api/path';\r\n * const appLogDirPath = await appLogDir();\r\n * ```\r\n *\r\n * @since 1.2.0\r\n */\r\nasync function appLogDir() {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolvePath',\r\n            path: '',\r\n            directory: BaseDirectory.AppLog\r\n        }\r\n    });\r\n}\r\n/**\r\n * Provides the platform-specific path segment separator:\r\n * - `\\` on Windows\r\n * - `/` on POSIX\r\n *\r\n * @since 1.0.0\r\n */\r\nconst sep = isWindows() ? '\\\\' : '/';\r\n/**\r\n * Provides the platform-specific path segment delimiter:\r\n * - `;` on Windows\r\n * - `:` on POSIX\r\n *\r\n * @since 1.0.0\r\n */\r\nconst delimiter = isWindows() ? ';' : ':';\r\n/**\r\n * Resolves a sequence of `paths` or `path` segments into an absolute path.\r\n * @example\r\n * ```typescript\r\n * import { resolve, appDataDir } from '@tauri-apps/api/path';\r\n * const appDataDirPath = await appDataDir();\r\n * const path = await resolve(appDataDirPath, '..', 'users', 'tauri', 'avatar.png');\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function resolve(...paths) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'resolve',\r\n            paths\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes the given `path`, resolving `'..'` and `'.'` segments and resolve symbolic links.\r\n * @example\r\n * ```typescript\r\n * import { normalize, appDataDir } from '@tauri-apps/api/path';\r\n * const appDataDirPath = await appDataDir();\r\n * const path = await normalize(appDataDirPath, '..', 'users', 'tauri', 'avatar.png');\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function normalize(path) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'normalize',\r\n            path\r\n        }\r\n    });\r\n}\r\n/**\r\n *  Joins all given `path` segments together using the platform-specific separator as a delimiter, then normalizes the resulting path.\r\n * @example\r\n * ```typescript\r\n * import { join, appDataDir } from '@tauri-apps/api/path';\r\n * const appDataDirPath = await appDataDir();\r\n * const path = await join(appDataDirPath, 'users', 'tauri', 'avatar.png');\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function join(...paths) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'join',\r\n            paths\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the directory name of a `path`. Trailing directory separators are ignored.\r\n * @example\r\n * ```typescript\r\n * import { dirname } from '@tauri-apps/api/path';\r\n * const dir = await dirname('/path/to/somedir/');\r\n * assert(dir === 'somedir');\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function dirname(path) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'dirname',\r\n            path\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the extension of the `path`.\r\n * @example\r\n * ```typescript\r\n * import { extname } from '@tauri-apps/api/path';\r\n * const ext = await extname('/path/to/file.html');\r\n * assert(ext === 'html');\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function extname(path) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'extname',\r\n            path\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns the last portion of a `path`. Trailing directory separators are ignored.\r\n * @example\r\n * ```typescript\r\n * import { basename } from '@tauri-apps/api/path';\r\n * const base = await basename('path/to/app.conf');\r\n * assert(base === 'app.conf');\r\n * ```\r\n *\r\n * @param ext An optional file extension to be removed from the returned path.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function basename(path, ext) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'basename',\r\n            path,\r\n            ext\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns whether the path is absolute or not.\r\n * @example\r\n * ```typescript\r\n * import { isAbsolute } from '@tauri-apps/api/path';\r\n * assert(await isAbsolute('/home/tauri'));\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function isAbsolute(path) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Path',\r\n        message: {\r\n            cmd: 'isAbsolute',\r\n            path\r\n        }\r\n    });\r\n}\r\n\r\nexport { BaseDirectory, appCacheDir, appConfigDir, appDataDir, appDir, appLocalDataDir, appLogDir, audioDir, basename, cacheDir, configDir, dataDir, delimiter, desktopDir, dirname, documentDir, downloadDir, executableDir, extname, fontDir, homeDir, isAbsolute, join, localDataDir, logDir, normalize, pictureDir, publicDir, resolve, resolveResource, resourceDir, runtimeDir, sep, templateDir, videoDir };\r\n"],
  "mappings": "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",
  "names": []
}
