{
  "version": 3,
  "sources": ["../../@tauri-apps/api/dialog.js"],
  "sourcesContent": ["import { invokeTauriCommand } from './helpers/tauri.js';\r\n\r\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\r\n// SPDX-License-Identifier: Apache-2.0\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * Native system dialogs for opening and saving files.\r\n *\r\n * This package is also accessible with `window.__TAURI__.dialog` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\r\n *\r\n * The APIs must be added to [`tauri.allowlist.dialog`](https://tauri.app/v1/api/config/#allowlistconfig.dialog) in `tauri.conf.json`:\r\n * ```json\r\n * {\r\n *   \"tauri\": {\r\n *     \"allowlist\": {\r\n *       \"dialog\": {\r\n *         \"all\": true, // enable all dialog APIs\r\n *         \"ask\": true, // enable dialog ask API\r\n *         \"confirm\": true, // enable dialog confirm API\r\n *         \"message\": true, // enable dialog message API\r\n *         \"open\": true, // enable file open API\r\n *         \"save\": true // enable file save API\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\r\n * @module\r\n */\r\n/**\r\n * Open a file/directory selection dialog.\r\n *\r\n * The selected paths are added to the filesystem and asset protocol allowlist scopes.\r\n * When security is more important than the easy of use of this API,\r\n * prefer writing a dedicated command instead.\r\n *\r\n * Note that the allowlist scope change is not persisted, so the values are cleared when the application is restarted.\r\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/plugins-workspace/tree/v1/plugins/persisted-scope).\r\n * @example\r\n * ```typescript\r\n * import { open } from '@tauri-apps/api/dialog';\r\n * // Open a selection dialog for image files\r\n * const selected = await open({\r\n *   multiple: true,\r\n *   filters: [{\r\n *     name: 'Image',\r\n *     extensions: ['png', 'jpeg']\r\n *   }]\r\n * });\r\n * if (Array.isArray(selected)) {\r\n *   // user selected multiple files\r\n * } else if (selected === null) {\r\n *   // user cancelled the selection\r\n * } else {\r\n *   // user selected a single file\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```typescript\r\n * import { open } from '@tauri-apps/api/dialog';\r\n * import { appDir } from '@tauri-apps/api/path';\r\n * // Open a selection dialog for directories\r\n * const selected = await open({\r\n *   directory: true,\r\n *   multiple: true,\r\n *   defaultPath: await appDir(),\r\n * });\r\n * if (Array.isArray(selected)) {\r\n *   // user selected multiple directories\r\n * } else if (selected === null) {\r\n *   // user cancelled the selection\r\n * } else {\r\n *   // user selected a single directory\r\n * }\r\n * ```\r\n *\r\n * @returns A promise resolving to the selected path(s)\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function open(options = {}) {\r\n    if (typeof options === 'object') {\r\n        Object.freeze(options);\r\n    }\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Dialog',\r\n        message: {\r\n            cmd: 'openDialog',\r\n            options\r\n        }\r\n    });\r\n}\r\n/**\r\n * Open a file/directory save dialog.\r\n *\r\n * The selected path is added to the filesystem and asset protocol allowlist scopes.\r\n * When security is more important than the easy of use of this API,\r\n * prefer writing a dedicated command instead.\r\n *\r\n * Note that the allowlist scope change is not persisted, so the values are cleared when the application is restarted.\r\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/plugins-workspace/tree/v1/plugins/persisted-scope).\r\n * @example\r\n * ```typescript\r\n * import { save } from '@tauri-apps/api/dialog';\r\n * const filePath = await save({\r\n *   filters: [{\r\n *     name: 'Image',\r\n *     extensions: ['png', 'jpeg']\r\n *   }]\r\n * });\r\n * ```\r\n *\r\n * @returns A promise resolving to the selected path.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function save(options = {}) {\r\n    if (typeof options === 'object') {\r\n        Object.freeze(options);\r\n    }\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Dialog',\r\n        message: {\r\n            cmd: 'saveDialog',\r\n            options\r\n        }\r\n    });\r\n}\r\n/**\r\n * Shows a message dialog with an `Ok` button.\r\n * @example\r\n * ```typescript\r\n * import { message } from '@tauri-apps/api/dialog';\r\n * await message('Tauri is awesome', 'Tauri');\r\n * await message('File not found', { title: 'Tauri', type: 'error' });\r\n * ```\r\n *\r\n * @param message The message to show.\r\n * @param options The dialog's options. If a string, it represents the dialog title.\r\n *\r\n * @returns A promise indicating the success or failure of the operation.\r\n *\r\n * @since 1.0.0\r\n *\r\n */\r\nasync function message(message, options) {\r\n    var _a, _b;\r\n    const opts = typeof options === 'string' ? { title: options } : options;\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Dialog',\r\n        message: {\r\n            cmd: 'messageDialog',\r\n            message: message.toString(),\r\n            title: (_a = opts === null || opts === void 0 ? void 0 : opts.title) === null || _a === void 0 ? void 0 : _a.toString(),\r\n            type: opts === null || opts === void 0 ? void 0 : opts.type,\r\n            buttonLabel: (_b = opts === null || opts === void 0 ? void 0 : opts.okLabel) === null || _b === void 0 ? void 0 : _b.toString()\r\n        }\r\n    });\r\n}\r\n/**\r\n * Shows a question dialog with `Yes` and `No` buttons.\r\n * @example\r\n * ```typescript\r\n * import { ask } from '@tauri-apps/api/dialog';\r\n * const yes = await ask('Are you sure?', 'Tauri');\r\n * const yes2 = await ask('This action cannot be reverted. Are you sure?', { title: 'Tauri', type: 'warning' });\r\n * ```\r\n *\r\n * @param message The message to show.\r\n * @param options The dialog's options. If a string, it represents the dialog title.\r\n *\r\n * @returns A promise resolving to a boolean indicating whether `Yes` was clicked or not.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function ask(message, options) {\r\n    var _a, _b, _c, _d, _e;\r\n    const opts = typeof options === 'string' ? { title: options } : options;\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Dialog',\r\n        message: {\r\n            cmd: 'askDialog',\r\n            message: message.toString(),\r\n            title: (_a = opts === null || opts === void 0 ? void 0 : opts.title) === null || _a === void 0 ? void 0 : _a.toString(),\r\n            type: opts === null || opts === void 0 ? void 0 : opts.type,\r\n            buttonLabels: [\r\n                (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.okLabel) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : 'Yes',\r\n                (_e = (_d = opts === null || opts === void 0 ? void 0 : opts.cancelLabel) === null || _d === void 0 ? void 0 : _d.toString()) !== null && _e !== void 0 ? _e : 'No'\r\n            ]\r\n        }\r\n    });\r\n}\r\n/**\r\n * Shows a question dialog with `Ok` and `Cancel` buttons.\r\n * @example\r\n * ```typescript\r\n * import { confirm } from '@tauri-apps/api/dialog';\r\n * const confirmed = await confirm('Are you sure?', 'Tauri');\r\n * const confirmed2 = await confirm('This action cannot be reverted. Are you sure?', { title: 'Tauri', type: 'warning' });\r\n * ```\r\n *\r\n * @param message The message to show.\r\n * @param options The dialog's options. If a string, it represents the dialog title.\r\n *\r\n * @returns A promise resolving to a boolean indicating whether `Ok` was clicked or not.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function confirm(message, options) {\r\n    var _a, _b, _c, _d, _e;\r\n    const opts = typeof options === 'string' ? { title: options } : options;\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Dialog',\r\n        message: {\r\n            cmd: 'confirmDialog',\r\n            message: message.toString(),\r\n            title: (_a = opts === null || opts === void 0 ? void 0 : opts.title) === null || _a === void 0 ? void 0 : _a.toString(),\r\n            type: opts === null || opts === void 0 ? void 0 : opts.type,\r\n            buttonLabels: [\r\n                (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.okLabel) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : 'Ok',\r\n                (_e = (_d = opts === null || opts === void 0 ? void 0 : opts.cancelLabel) === null || _d === void 0 ? void 0 : _d.toString()) !== null && _e !== void 0 ? _e : 'Cancel'\r\n            ]\r\n        }\r\n    });\r\n}\r\n\r\nexport { ask, confirm, message, open, save };\r\n"],
  "mappings": "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",
  "names": ["message"]
}
