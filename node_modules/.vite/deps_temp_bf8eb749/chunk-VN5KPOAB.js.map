{
  "version": 3,
  "sources": ["../../@tauri-apps/api/helpers/event.js", "../../@tauri-apps/api/event.js"],
  "sourcesContent": ["import { invokeTauriCommand } from './tauri.js';\r\nimport { transformCallback } from '../tauri.js';\r\n\r\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\r\n// SPDX-License-Identifier: Apache-2.0\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * Unregister the event listener associated with the given name and id.\r\n *\r\n * @ignore\r\n * @param event The event name\r\n * @param eventId Event identifier\r\n * @returns\r\n */\r\nasync function _unlisten(event, eventId) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Event',\r\n        message: {\r\n            cmd: 'unlisten',\r\n            event,\r\n            eventId\r\n        }\r\n    });\r\n}\r\n/**\r\n * Emits an event to the backend.\r\n *\r\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n * @param [windowLabel] The label of the window to which the event is sent, if null/undefined the event will be sent to all windows\r\n * @param [payload] Event payload\r\n * @returns\r\n */\r\nasync function emit(event, windowLabel, payload) {\r\n    await invokeTauriCommand({\r\n        __tauriModule: 'Event',\r\n        message: {\r\n            cmd: 'emit',\r\n            event,\r\n            windowLabel,\r\n            payload\r\n        }\r\n    });\r\n}\r\n/**\r\n * Listen to an event from the backend.\r\n *\r\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n * @param handler Event handler callback.\r\n * @return A promise resolving to a function to unlisten to the event.\r\n */\r\nasync function listen(event, windowLabel, handler) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Event',\r\n        message: {\r\n            cmd: 'listen',\r\n            event,\r\n            windowLabel,\r\n            handler: transformCallback(handler)\r\n        }\r\n    }).then((eventId) => {\r\n        return async () => _unlisten(event, eventId);\r\n    });\r\n}\r\n/**\r\n * Listen to an one-off event from the backend.\r\n *\r\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n * @param handler Event handler callback.\r\n * @returns A promise resolving to a function to unlisten to the event.\r\n */\r\nasync function once(event, windowLabel, handler) {\r\n    return listen(event, windowLabel, (eventData) => {\r\n        handler(eventData);\r\n        _unlisten(event, eventData.id).catch(() => { });\r\n    });\r\n}\r\n\r\nexport { emit, listen, once };\r\n", "import { listen as listen$1, once as once$1, emit as emit$1 } from './helpers/event.js';\r\n\r\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\r\n// SPDX-License-Identifier: Apache-2.0\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * The event system allows you to emit events to the backend and listen to events from it.\r\n *\r\n * This package is also accessible with `window.__TAURI__.event` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\r\n * @module\r\n */\r\n/**\r\n * @since 1.1.0\r\n */\r\nvar TauriEvent;\r\n(function (TauriEvent) {\r\n    TauriEvent[\"WINDOW_RESIZED\"] = \"tauri://resize\";\r\n    TauriEvent[\"WINDOW_MOVED\"] = \"tauri://move\";\r\n    TauriEvent[\"WINDOW_CLOSE_REQUESTED\"] = \"tauri://close-requested\";\r\n    TauriEvent[\"WINDOW_CREATED\"] = \"tauri://window-created\";\r\n    TauriEvent[\"WINDOW_DESTROYED\"] = \"tauri://destroyed\";\r\n    TauriEvent[\"WINDOW_FOCUS\"] = \"tauri://focus\";\r\n    TauriEvent[\"WINDOW_BLUR\"] = \"tauri://blur\";\r\n    TauriEvent[\"WINDOW_SCALE_FACTOR_CHANGED\"] = \"tauri://scale-change\";\r\n    TauriEvent[\"WINDOW_THEME_CHANGED\"] = \"tauri://theme-changed\";\r\n    TauriEvent[\"WINDOW_FILE_DROP\"] = \"tauri://file-drop\";\r\n    TauriEvent[\"WINDOW_FILE_DROP_HOVER\"] = \"tauri://file-drop-hover\";\r\n    TauriEvent[\"WINDOW_FILE_DROP_CANCELLED\"] = \"tauri://file-drop-cancelled\";\r\n    TauriEvent[\"MENU\"] = \"tauri://menu\";\r\n    TauriEvent[\"CHECK_UPDATE\"] = \"tauri://update\";\r\n    TauriEvent[\"UPDATE_AVAILABLE\"] = \"tauri://update-available\";\r\n    TauriEvent[\"INSTALL_UPDATE\"] = \"tauri://update-install\";\r\n    TauriEvent[\"STATUS_UPDATE\"] = \"tauri://update-status\";\r\n    TauriEvent[\"DOWNLOAD_PROGRESS\"] = \"tauri://update-download-progress\";\r\n})(TauriEvent || (TauriEvent = {}));\r\n/**\r\n * Listen to an event. The event can be either global or window-specific.\r\n * See {@link Event.windowLabel} to check the event source.\r\n *\r\n * @example\r\n * ```typescript\r\n * import { listen } from '@tauri-apps/api/event';\r\n * const unlisten = await listen<string>('error', (event) => {\r\n *   console.log(`Got error in window ${event.windowLabel}, payload: ${event.payload}`);\r\n * });\r\n *\r\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n * unlisten();\r\n * ```\r\n *\r\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n * @param handler Event handler callback.\r\n * @returns A promise resolving to a function to unlisten to the event.\r\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function listen(event, handler) {\r\n    return listen$1(event, null, handler);\r\n}\r\n/**\r\n * Listen to an one-off event. See {@link listen} for more information.\r\n *\r\n * @example\r\n * ```typescript\r\n * import { once } from '@tauri-apps/api/event';\r\n * interface LoadedPayload {\r\n *   loggedIn: boolean,\r\n *   token: string\r\n * }\r\n * const unlisten = await once<LoadedPayload>('loaded', (event) => {\r\n *   console.log(`App is loaded, loggedIn: ${event.payload.loggedIn}, token: ${event.payload.token}`);\r\n * });\r\n *\r\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n * unlisten();\r\n * ```\r\n *\r\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n * @returns A promise resolving to a function to unlisten to the event.\r\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function once(event, handler) {\r\n    return once$1(event, null, handler);\r\n}\r\n/**\r\n * Emits an event to the backend and all Tauri windows.\r\n * @example\r\n * ```typescript\r\n * import { emit } from '@tauri-apps/api/event';\r\n * await emit('frontend-loaded', { loggedIn: true, token: 'authToken' });\r\n * ```\r\n *\r\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function emit(event, payload) {\r\n    return emit$1(event, undefined, payload);\r\n}\r\n\r\nexport { TauriEvent, emit, listen, once };\r\n"],
  "mappings": ";;;;;;;;AAcA,eAAe,UAAU,OAAO,SAAS;AACrC,SAAO,mBAAmB;AAAA,IACtB,eAAe;AAAA,IACf,SAAS;AAAA,MACL,KAAK;AAAA,MACL;AAAA,MACA;AAAA,IACJ;AAAA,EACJ,CAAC;AACL;AASA,eAAe,KAAK,OAAO,aAAa,SAAS;AAC7C,QAAM,mBAAmB;AAAA,IACrB,eAAe;AAAA,IACf,SAAS;AAAA,MACL,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ,CAAC;AACL;AAQA,eAAe,OAAO,OAAO,aAAa,SAAS;AAC/C,SAAO,mBAAmB;AAAA,IACtB,eAAe;AAAA,IACf,SAAS;AAAA,MACL,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA,SAAS,kBAAkB,OAAO;AAAA,IACtC;AAAA,EACJ,CAAC,EAAE,KAAK,CAAC,YAAY;AACjB,WAAO,YAAY,UAAU,OAAO,OAAO;AAAA,EAC/C,CAAC;AACL;AAQA,eAAe,KAAK,OAAO,aAAa,SAAS;AAC7C,SAAO,OAAO,OAAO,aAAa,CAAC,cAAc;AAC7C,YAAQ,SAAS;AACjB,cAAU,OAAO,UAAU,EAAE,EAAE,MAAM,MAAM;AAAA,IAAE,CAAC;AAAA,EAClD,CAAC;AACL;;;AC7DA,IAAI;AAAA,CACH,SAAUA,aAAY;AACnB,EAAAA,YAAW,gBAAgB,IAAI;AAC/B,EAAAA,YAAW,cAAc,IAAI;AAC7B,EAAAA,YAAW,wBAAwB,IAAI;AACvC,EAAAA,YAAW,gBAAgB,IAAI;AAC/B,EAAAA,YAAW,kBAAkB,IAAI;AACjC,EAAAA,YAAW,cAAc,IAAI;AAC7B,EAAAA,YAAW,aAAa,IAAI;AAC5B,EAAAA,YAAW,6BAA6B,IAAI;AAC5C,EAAAA,YAAW,sBAAsB,IAAI;AACrC,EAAAA,YAAW,kBAAkB,IAAI;AACjC,EAAAA,YAAW,wBAAwB,IAAI;AACvC,EAAAA,YAAW,4BAA4B,IAAI;AAC3C,EAAAA,YAAW,MAAM,IAAI;AACrB,EAAAA,YAAW,cAAc,IAAI;AAC7B,EAAAA,YAAW,kBAAkB,IAAI;AACjC,EAAAA,YAAW,gBAAgB,IAAI;AAC/B,EAAAA,YAAW,eAAe,IAAI;AAC9B,EAAAA,YAAW,mBAAmB,IAAI;AACtC,GAAG,eAAe,aAAa,CAAC,EAAE;AAuBlC,eAAeC,QAAO,OAAO,SAAS;AAClC,SAAO,OAAS,OAAO,MAAM,OAAO;AACxC;AAyBA,eAAeC,MAAK,OAAO,SAAS;AAChC,SAAO,KAAO,OAAO,MAAM,OAAO;AACtC;AAaA,eAAeC,MAAK,OAAO,SAAS;AAChC,SAAO,KAAO,OAAO,QAAW,OAAO;AAC3C;",
  "names": ["TauriEvent", "listen", "once", "emit"]
}
